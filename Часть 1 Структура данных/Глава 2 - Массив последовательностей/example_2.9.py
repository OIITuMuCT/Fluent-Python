# Пример 2.9. Метод из гипотетического класса Robot

def handle_command(self, message):
    # 1 Выражение после ключевого слова match называется субъектом.
    # Это данные, которые Python попытается сопоставить в образцами в ветвях case.
    match message:
        # 2 С этим образцом сопоставляется любой субъект, являющийся
        # последовательностью трех элементов.
        # Первый элемент должен быть равен "BEEPER".
        # Второй и третий могут быть любыми, они связываются с
        # переменными frequency & times именно в таком порядке
        case ["BEEPER", frequency, times]:
            self.beep(times, frequency)
            # 3 С этим образцом сопоставляется любой субъект, содержащий
            # два элемента, причем первый должен быть равен "NECK"
        case ['NECK', angle]:
            self.rotate_neck(angle)
            # 4 С этим образцом сопоставляется субъект, содержащий три элемента,
            # первым из которых должен быть 'LED'. Если число элементов
            # не совпадает, то Python переходит к следующей ветви case.
        case ['LED', ident, intensity]:
            self.leds[ident].set_brightness(ident, intensity)
            # 5 Еще одна последовательность-образец, начинающаяся с 'LED', 
            # но теперь содержащая пять элементов, включая константу 'LED'.
        case ['LED', ident, red, green, blue]:
            self.leds[ident].set_color(ident, red, green, blue)
            # 6 Это ветвь case по умолчанию. С ней сопоставляется любой субъект, 
            # для которого не нашлось подходящего образца. 
            # Переменная _ специальная, как мы увидим ниже. 
        case _:
            raise InvalidCommand(message)


if __name__ == "__main__":

