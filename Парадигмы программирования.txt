1. Парадигмы программирования
2. Императивное программирование(imperative - приказ, повелительное наклонение)
3. Структурное программирование
4. Объектно-ориентированное программирование
5. Логическое программирование
6. Функциональное программирование

Парадигма программирования - совокупность идей и понятий, определяющий стиль  написания компьютерных программ.
Язык программирования Python - мультипарадигменный.

Основные парадигмы программирования:
    Императивное программирование;
        в исходном коде программы записаны инструкции(команды)
        инструкции должны выполняться последовательно;
        данные, полученные при выполнении инструкции, могут записываться в память;
        данные, получаемые при выполнении предыдущих инструкций, могут читаться  из памяти последующими инструкциями. 

        основные механизмы управления:
            последовательное исполнение команд;
            использование именованных переменных;
            использование оператора присваивания;
            использование ветвления(оператор if);
            использование безусловного перехода(оператор goto)
    Ключевой идеей императивного программирования является работа с переменными, как с временным хранением данных в оперативной памяти.
    Структурное программирование;
        Структурная парадигма программирования нацелена на сокращение времени разработки и упроцение поддержки программ за счет использования блочных операторов и программ.
            Основные механизмы:
                последовательное исполнение программ;
                использование именованных переменных;
                использование оператора присваивания;
                использование ветвления;
                использование циклов;
                использование подпрограмм(функций)
        В структурном программировании программа по возможности разбивается на маленькие подпрограммы(функции) с изолированным контекстом. 
    объектно-ориентированное;
        В объектно-ориентированной парадигме программа разбивается на объекты - структуры данных, состоящие из полей, описывающих состояние, и методов - функций, применяемыфх к объектам для изменения или запроса их состояния.
            Объектно-ориентированную парадигму поддерживают:
                Python, C#, Java, C++, JavaScript, и другие.
                Основные механизмы управления:
                    абстракция;
                    класс;
                    объект;
                    полиморфизм;
                    инкапсуляция;
                    наследование;

    функциональное программирование;
        Основной инструмент функционального программирования(ФП) - математические функции.
        Сильные стороны функционального программирования:
            повышение надежности кода;
            удобство организации модульного тестирования;
            возможности оптимизации при компиляции;
            возможности параллелизма.
        Основные идеи функционального программирования:
            неизменяемые переменные - в функциональном программировании можно определить переменную, но изменить ее значение нельзя;
            чистая функция - это функция, результат работы которой предсказуем. При вызосви с одними и теми же аргументами, такая функция всегда вернет одно и то же значение. Про такие функции говорят, что они не вызывают побочных эффектов;
            функции высшего порядка - могут принимать другие функции в качестве аргумента или возвращать их;
            рекурсия - поддерживается многими языками программирования, а для функционального программироавяния обязательна.
            лямбда-выражения - способ оределения анонимных функциональных объектов.
    Логическое программирование;
